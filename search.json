[{"path":"https://tjuheide.github.io/MCC/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 MCC authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://tjuheide.github.io/MCC/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Uffe Heide-Jørgensen. Author, maintainer.","code":""},{"path":"https://tjuheide.github.io/MCC/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Heide-Jørgensen Uffe, (2025). MCC: Mean Cumulative Count. R package version 0.0.0.9000, https://github.com/tjuheide/MCC, https://tjuheide.github.io/MCC/","code":"@Manual{,   title = {{MCC}: Mean Cumulative Count},   author = {Uffe Heide-Jørgensen},   year = {2025},   note = {R package version 0.0.0.9000},   url = {https://github.com/tjuheide/MCC, https://tjuheide.github.io/MCC/}, }"},{"path":"https://tjuheide.github.io/MCC/index.html","id":"mcc-","dir":"","previous_headings":"","what":"Mean Cumulative Count","title":"Mean Cumulative Count","text":"goal MCC compute mean cumulative count recurrent event","code":""},{"path":"https://tjuheide.github.io/MCC/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Mean Cumulative Count","text":"can install development version MCC like :","code":"devtools::install_github(\"tjuheide/MCC\")"},{"path":"https://tjuheide.github.io/MCC/reference/MCC-package.html","id":null,"dir":"Reference","previous_headings":"","what":"MCC — MCC-package","title":"MCC — MCC-package","text":"package compute mean cumulative count recurrent event","code":""},{"path":[]},{"path":"https://tjuheide.github.io/MCC/reference/MCC-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"MCC — MCC-package","text":"Maintainer: Uffe Heide-Jørgensen uhj@clin.au.dk (ORCID)","code":""},{"path":"https://tjuheide.github.io/MCC/reference/carryforward.html","id":null,"dir":"Reference","previous_headings":"","what":"Carry forward last non-NA — carryforward","title":"Carry forward last non-NA — carryforward","text":"Function let last non NA value variable carried forward","code":""},{"path":"https://tjuheide.github.io/MCC/reference/carryforward.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Carry forward last non-NA — carryforward","text":"","code":"carryforward(x, na.rm = TRUE)"},{"path":"https://tjuheide.github.io/MCC/reference/carryforward.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Carry forward last non-NA — carryforward","text":"x name variable last non NA value repeated na.rm x starts one NAs leading NAs removed default. Set na.rm = FALSE retain leading NAs","code":""},{"path":"https://tjuheide.github.io/MCC/reference/carryforward.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Carry forward last non-NA — carryforward","text":"variable similar input non-leading NAs replaced last non-NA value. Leading non-NAs either removed remain NAs.","code":""},{"path":"https://tjuheide.github.io/MCC/reference/carryforward.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Carry forward last non-NA — carryforward","text":"","code":"x <- c(NA, NA, NA, NA, 1, 3, 52, 5, 6, NA, 532, NA, NA, NA, 43) y <- carryforward(x) z <- carryforward(x, na.rm = FALSE)"},{"path":"https://tjuheide.github.io/MCC/reference/checkData.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic data check for obvious errors — checkData","title":"Generic data check for obvious errors — checkData","text":"check obvious errors data, e.g., negative time, disallowed values event indicator, (potentially) illogical events: 1. death censoring last observation, 2. event interest last day follow-(latter can seen individual gets event censored died day)","code":""},{"path":"https://tjuheide.github.io/MCC/reference/checkData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic data check for obvious errors — checkData","text":"","code":"checkData(data, idvar, timevar, eventvar, weightvar)"},{"path":"https://tjuheide.github.io/MCC/reference/checkData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic data check for obvious errors — checkData","text":"data name input data id, time, event variable idvar name id variable data timevar name time variable data eventvar name event variable data weightvar (optional) name weight variable","code":""},{"path":"https://tjuheide.github.io/MCC/reference/checkData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic data check for obvious errors — checkData","text":"tibble observations appear faulty (), otherwise NULL","code":""},{"path":"https://tjuheide.github.io/MCC/reference/checkData.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generic data check for obvious errors — checkData","text":"","code":"df <- data.table::data.table(id = c(1,1,1,2,2),                              time = c(231,53,253,41,87),                              event = c(1,1,2,1,0),                              weight = c(.9,.9,.9,1.07,1.07)) df2 <- data.table::data.table(id = c(1,1,1,2,2),                               time = c(-31,53,253,41,87),                               event = c(3,2,2,3,1),                               weight = c(.9,.9,.92,1.07,1.07)) f <- checkData(df, \"id\", \"time\", \"event\", \"weight\") f2 <- checkData(df2, \"id\", \"time\", \"event\", \"weight\") #> [1] \"Warning: the following observation(s) suggest(s) incorrect data\""},{"path":"https://tjuheide.github.io/MCC/reference/expandMCC.html","id":null,"dir":"Reference","previous_headings":"","what":"Expand MCC-estimates to all times — expandMCC","title":"Expand MCC-estimates to all times — expandMCC","text":"MCCs compared across groups nice estimate groups relevant time point. Likewise, bootstrapping used estimate uncertainty number bootstrap estimates times. function ensures observation groups relevant times. Additional times can requested specifying times parameter. Estimates provided group least one individual risk given time. input come mcc-function assumed contain variables time grp.","code":""},{"path":"https://tjuheide.github.io/MCC/reference/expandMCC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Expand MCC-estimates to all times — expandMCC","text":"","code":"expandMCC(mcc_est, times = NULL)"},{"path":"https://tjuheide.github.io/MCC/reference/expandMCC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Expand MCC-estimates to all times — expandMCC","text":"mcc_est data.table MCC-function. times single value vector specific times estimate MCC needed. Default NULL times observed data outputted.","code":""},{"path":"https://tjuheide.github.io/MCC/reference/expandMCC.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Expand MCC-estimates to all times — expandMCC","text":"data.table MCC-estimate time-point observed either level grp, specified paramter times. E.g., observation time T grp , levels grp created observation time T exist already. vector times provided, observation created times well levels grp.","code":""},{"path":"https://tjuheide.github.io/MCC/reference/expandMCC.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Expand MCC-estimates to all times — expandMCC","text":"","code":"data(\"mcc_events\") mccOutput <- mcc(data = mcc_events,                  idvar = \"id\",                  timevar = \"time\",                  eventvar = \"event\",                  grpvar = \"grp\",                  weightvar = \"weight\") mccOutputExpand <- expandMCC(mccOutput) mccOutputExpand <- expandMCC(mccOutput, c(1, 5, 10)) #> [1] \"Warning:\" #> [1] \"A specified time point exceeds the follow-up in a group.\" #> [1] \"Estimates beyond the observed follow-up will not be made.\""},{"path":"https://tjuheide.github.io/MCC/reference/mcc.html","id":null,"dir":"Reference","previous_headings":"","what":"Mean Cumulative Count for Recurrent Events — mcc","title":"Mean Cumulative Count for Recurrent Events — mcc","text":"Function estimating mean cumulative count recurrent event taking competing risks account function allows weighted observations can computed counts levels group variable","code":""},{"path":"https://tjuheide.github.io/MCC/reference/mcc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mean Cumulative Count for Recurrent Events — mcc","text":"","code":"mcc(data, idvar, timevar, eventvar, grpvar, weightvar)"},{"path":"https://tjuheide.github.io/MCC/reference/mcc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mean Cumulative Count for Recurrent Events — mcc","text":"data data.table study id, time, event indicator, optionally group weight variables. last observed event id must either censoring competing event intermediate events must event interest function return correct estimate. idvar variable identifying unique individuals, one observation within id event interest plus one. last observation correspond happens end follow-, either individual censored experiences competing event timevar Time variable, time points start follow-events happen individual longer followed eventvar Event indicator, 1 = event interest, 2 = competing event end follow-, 0 = individual censored end follow-grpvar (optional) Variable defining groups within MCC computed. assumed individuals switch groups follow-. weightvar (optional) Variable specifying weight individual. assumed constant throughout follow-","code":""},{"path":"https://tjuheide.github.io/MCC/reference/mcc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Mean Cumulative Count for Recurrent Events — mcc","text":"data.table one observation time event happened. output following variables: time, time follow-atrisk, (weighted) number risk current time km, (weighted) Kaplan-Meier estimator (competing risk-free) survival mcc, (weighted) mean cumulative count event interest censored, (weighted) number censored given time event_of_interest, (weighted) number events interest given time competing_event (weighted) number competing events given time grp: (grp parameter specified), value within MCC estimated","code":""},{"path":"https://tjuheide.github.io/MCC/reference/mcc.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Mean Cumulative Count for Recurrent Events — mcc","text":"Dong H, Robison LL, Leisenring WM, Martin LJ, Armstrong GT, Yasui Y.. Estimating burden recurrent events presence competing risks: method mean cumulative count. J Epidemiol. 2015;181(7):532-540. doi:10.1093/aje/kwu289","code":""},{"path":"https://tjuheide.github.io/MCC/reference/mcc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Mean Cumulative Count for Recurrent Events — mcc","text":"","code":"data(\"mcc_events\") x <- mcc(data = mcc_events,          idvar = \"id\",          timevar = \"time\",          eventvar = \"event\",          grpvar = \"grp\",          weightvar = \"weight\")"},{"path":"https://tjuheide.github.io/MCC/reference/mcc_events.html","id":null,"dir":"Reference","previous_headings":"","what":"Times and events — mcc_events","title":"Times and events — mcc_events","text":"Events times weights within 2 different groups. Data simulated","code":""},{"path":"https://tjuheide.github.io/MCC/reference/mcc_events.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Times and events — mcc_events","text":"","code":"mcc_events"},{"path":"https://tjuheide.github.io/MCC/reference/mcc_events.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Times and events — mcc_events","text":"data frame 2539 rows 5 variables: id ID grp Treatment group weight Weight ID time time event event event type: 0 = censored, 1 = event interest, 2 = death","code":""},{"path":"https://tjuheide.github.io/MCC/reference/mcc_events_bs.html","id":null,"dir":"Reference","previous_headings":"","what":"Times and events across 500 bootstrap iterations — mcc_events_bs","title":"Times and events across 500 bootstrap iterations — mcc_events_bs","text":"Events times weights within 2 different groups. Data simulated","code":""},{"path":"https://tjuheide.github.io/MCC/reference/mcc_events_bs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Times and events across 500 bootstrap iterations — mcc_events_bs","text":"","code":"mcc_events_bs"},{"path":"https://tjuheide.github.io/MCC/reference/mcc_events_bs.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Times and events across 500 bootstrap iterations — mcc_events_bs","text":"data frame 2539 rows 5 variables: BootstrapSample Bootstrap identifier id ID grp Treatment group weight Weight ID time time event event event type: 0 = censored, 1 = event interest, 2 = death","code":""},{"path":"https://tjuheide.github.io/MCC/reference/minmax.html","id":null,"dir":"Reference","previous_headings":"","what":"Longest shared follow-up — minmax","title":"Longest shared follow-up — minmax","text":"Function identify longest follow-group shortest follow-","code":""},{"path":"https://tjuheide.github.io/MCC/reference/minmax.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Longest shared follow-up — minmax","text":"","code":"minmax(data)"},{"path":"https://tjuheide.github.io/MCC/reference/minmax.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Longest shared follow-up — minmax","text":"data data.frame MCC-function grp-parameter specified (.e. variable grp)","code":""},{"path":"https://tjuheide.github.io/MCC/reference/minmax.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Longest shared follow-up — minmax","text":"numeric value longest time observed groups","code":""},{"path":"https://tjuheide.github.io/MCC/reference/minmax.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Longest shared follow-up — minmax","text":"","code":"mccOutput <- mcc(data = mcc_events,                  idvar = \"id\",                  timevar = \"time\",                  eventvar = \"event\",                  grpvar = \"grp\",                  weightvar = \"weight\") minmax(mccOutput) #>    minmax #>     <num> #> 1:      5"}]
